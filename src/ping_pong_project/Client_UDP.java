package ping_pong_project;

import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

import ping_pong_project.StartPage;

public class Client_UDP extends javax.swing.JFrame {

    public static DatagramSocket Socket;
    // public static long  RTTs [] = new long[10];
    public static long RTTs[];

    public static DefaultTableModel model = new DefaultTableModel();

    public Client_UDP() {
        initComponents();

        try {
            Socket = new DatagramSocket();
        } catch (SocketException ex) {
            Logger.getLogger(Client_UDP.class.getName()).log(Level.SEVERE, null, ex);
        }

        NumOfPackets.removeAllItems();
        initialNumOfPackets();

        TimeOut.removeAllItems();
        initialTimeOut();

        Table.getTableHeader().setFont(new Font("Times New Roman", Font.BOLD, 12));

        model = (DefaultTableModel) Table.getModel();

    }

    //********************************************************************************
    public static void initialNumOfPackets() {

        NumOfPackets.addItem(" 10 ");
        NumOfPackets.addItem(" 9 ");
        NumOfPackets.addItem(" 8 ");
        NumOfPackets.addItem(" 7 ");
        NumOfPackets.addItem(" 6 ");
        NumOfPackets.addItem(" 5 ");
        NumOfPackets.addItem(" 4 ");
        NumOfPackets.addItem(" 3 ");
        NumOfPackets.addItem(" 2 ");
        NumOfPackets.addItem(" 1 ");

    }

    //***********************************************************************************
    public static void initialTimeOut() {

        TimeOut.addItem(" 1 ");
        TimeOut.addItem(" 2 ");
        TimeOut.addItem(" 3 ");
        TimeOut.addItem(" 4 ");
        TimeOut.addItem(" 5 ");
        TimeOut.addItem(" 6 ");
        TimeOut.addItem(" 7 ");
        TimeOut.addItem(" 8 ");
        TimeOut.addItem(" 9 ");
        TimeOut.addItem(" 10 ");

    }

    //***********************************************************************************
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Test = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        IPadd = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        PortNum = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SizeOfPacket = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        NumOfPackets = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        AvgRTTs = new javax.swing.JLabel();
        MaxRTT = new javax.swing.JLabel();
        MinRTT = new javax.swing.JLabel();
        NumOfPacketArrived = new javax.swing.JLabel();
        NumOfPacketLost = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        TimeOut = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Test.setBackground(new java.awt.Color(153, 153, 153));
        Test.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Test.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ping_pong_project/testImage.png"))); // NOI18N
        Test.setText(" Test");
        Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Enter IP address :");

        IPadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPaddActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Enter Port Number :");

        Table.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Packet Number", "Status", "RTT in (ms)"
            }
        ));
        Table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(Table);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Avg RTTs :");

        jLabel5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Enter Size of Packet :");

        SizeOfPacket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeOfPacketActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Byte");

        NumOfPackets.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        NumOfPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumOfPacketsActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Number of Packets :");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setText("Max RTT :");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel8.setText("MinRTT :");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel9.setText("# of Packets arrived : ");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel10.setText("# of Packets lost :");

        AvgRTTs.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        MaxRTT.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        MinRTT.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        NumOfPacketArrived.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        NumOfPacketLost.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("TimeOut :");

        TimeOut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        TimeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeOutActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("In Second");

        Back.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ping_pong_project/Go-back-icon1.png"))); // NOI18N
        Back.setText("  Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Test, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(SizeOfPacket, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addComponent(NumOfPackets, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(IPadd)
                            .addComponent(PortNum)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Back, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(AvgRTTs, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                .addComponent(MaxRTT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MinRTT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(146, 146, 146))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(NumOfPacketArrived, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(NumOfPacketLost, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(56, 56, 56)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IPadd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(PortNum, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AvgRTTs, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(MaxRTT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MinRTT, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NumOfPacketArrived, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NumOfPacketLost, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(SizeOfPacket))
                        .addGap(7, 7, 7)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(NumOfPackets, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TimeOut, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Test, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IPaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPaddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IPaddActionPerformed

    //**********************************************************************************************

    private void TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestActionPerformed

        deleteOldDateOnJTable();

        int port = 0;
        int Ip = 0;
        int size = 0;

        boolean PortFlage = true;

        RTTs = new long[GetNumOfPacket()]; // here declare the RTTs 

        String input_ip = IPadd.getText();
        String input_port = PortNum.getText();
        String input_SizeOfPacket = SizeOfPacket.getText();

        if (input_ip.equals("") || input_port.equals("") || input_SizeOfPacket.equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(null, "Please complete the input information !", " Wrong ", JOptionPane.ERROR_MESSAGE);

        } else {

            if (CheckFormatIp() == true) {

                try {

                    port = Integer.parseInt(PortNum.getText());

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Enter the correct Port number !", " Wrong ", JOptionPane.ERROR_MESSAGE);
                    PortFlage = false;
                }

                if (PortFlage == true) {

                    if (SizeIsValidated() == true) {

                        if (CheckSizeOfPacket() == true) {

                            size = Integer.parseInt(SizeOfPacket.getText());
                            SendPackets(input_ip, port, size);

                        } else {

                            JOptionPane.showMessageDialog(null, "the size of Packet most be between 1 - 1024 ! ", " Wrong ", JOptionPane.ERROR_MESSAGE);

                        }

                    } else {

                        JOptionPane.showMessageDialog(null, "Enter the correct Size number ! ", " Wrong ", JOptionPane.ERROR_MESSAGE);
                    }

                } else {

                }

            } else {

                JOptionPane.showMessageDialog(null, "Enter the correct format for IP number ! ", " Wrong ", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_TestActionPerformed

    private void SizeOfPacketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SizeOfPacketActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SizeOfPacketActionPerformed

    private void NumOfPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumOfPacketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumOfPacketsActionPerformed

    private void TimeOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeOutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeOutActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed

        deleteOldDateOnJTable();

        StartPage.Client1.setVisible(false);

        IPadd.setText("");
        PortNum.setText("");
        SizeOfPacket.setText("");

        NumOfPacketArrived.setText("");
        NumOfPacketLost.setText("");

        NumOfPackets.removeAllItems();
        initialNumOfPackets();

        TimeOut.removeAllItems();
        initialTimeOut();

        StartPage.Start_Page.setVisible(true);

    }//GEN-LAST:event_BackActionPerformed
//*******************************************************************************************
    //--------------------- this function create the packet and send them 

    public static void SendPackets(String IP, int Port, int Size) {

        JOptionPane.showMessageDialog(null, "Please wating the pong message !", " Information ", JOptionPane.INFORMATION_MESSAGE);
        try {

            int NumberOfPackets = GetNumOfPacket();  // this value come from ComboBox , this number of packet

            InetAddress ia = InetAddress.getByName(IP);

//            String i = " hi sever i am nawaf ";
//            byte[] b = (i + "").getBytes();
            byte b[] = new byte[Size];
            byte b2[] = new byte[Size];

            Socket.setSoTimeout(GetTimeOut());

            long st = 0, ft = 0;

            //model = (DefaultTableModel) Table.getModel();
            for (int j = 0; j < NumberOfPackets; j++) {

                try {

                    DatagramPacket dp = new DatagramPacket(b, b.length, ia, Port);
                    Socket.send(dp);

                    st = System.currentTimeMillis();

                    DatagramPacket dp1 = new DatagramPacket(b2, b2.length);
                    Socket.receive(dp1);

                    ft = System.currentTimeMillis();

                    RTTs[j] = (ft - st);

                    st = 0;
                    ft = 0;

                } catch (Exception e) {
                    RTTs[j] = -1;

                }

                if (RTTs[j] == -1) {
                    model.addRow(new Object[]{j + 1, " lost ", 0});

                } else {
                    model.addRow(new Object[]{j + 1, " arrived ", RTTs[j]});

                }

            }

            CalcAvgMaxMinRtt();
            NumOfPacketsArrivedAndLost();

        } catch (IOException ex) {
            Logger.getLogger(Client_UDP.class.getName()).log(Level.SEVERE, null, ex);

        }

    }
    //***********************************************************************************************  

    private void deleteOldDateOnJTable() {

        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }

    }
    //*****************************************************************************************  
    //-----------------------------> this Function Give us number of timeout

    public static int GetTimeOut() {

        int x = 0;
        int NumOfTimeOut = TimeOut.getSelectedIndex();
        switch (NumOfTimeOut) {

            case 0:
                x = 1000;
                break;
            case 1:
                x = 2000;
                break;
            case 2:
                x = 3000;
                break;
            case 3:
                x = 4000;
                break;
            case 4:
                x = 5000;
                break;
            case 5:
                x = 6000;
                break;
            case 6:
                x = 7000;
                break;
            case 7:
                x = 8000;
                break;
            case 8:
                x = 9000;
                break;
            case 9:
                x = 10000;
                break;
        }

        return x;
    }

    //******************************************************************************************  
    //-----------------------------> this Function Give us number of packets that will send
    public static int GetNumOfPacket() {

        int NumoOfPack = 0;
        NumoOfPack = NumOfPackets.getSelectedIndex();
        int x = 10;
        switch (NumoOfPack) {

            case 0:
                x = 10;
                break;
            case 1:
                x = 9;
                break;
            case 2:
                x = 8;
                break;
            case 3:
                x = 7;
                break;
            case 4:
                x = 6;
                break;
            case 5:
                x = 5;
                break;
            case 6:
                x = 4;
                break;
            case 7:
                x = 3;
                break;
            case 8:
                x = 2;
                break;
            case 9:
                x = 1;
                break;
        }
        return x;

    }

    //******************************************************************************************
    //---------------------------> Check if there character in IP and if the format is wrong
    public static boolean CheckFormatIp() {

        boolean IPflage = true;
        int P1 = 0;
        int P2 = 0;
        int P3 = 0;
        int P4 = 0;

        String IP = IPadd.getText();
        String Parts[] = IP.split("[.]");

        try {

            P1 = Integer.parseInt(Parts[0]);
            P2 = Integer.parseInt(Parts[1]);
            P3 = Integer.parseInt(Parts[2]);
            P4 = Integer.parseInt(Parts[3]);

        } catch (Exception e) {
            IPflage = false;

        }

        if (Parts.length == 4 && IPflage) {
            if ((P1 <= 255 && P1 >= 0) && (P2 <= 255 && P2 >= 0) && (P3 <= 255 && P3 >= 0) && (P4 <= 255 && P4 >= 0)) {
                return true;
            } else {
                return false;
            }
        } else {

            return false;
        }

    }
    //*******************************************************************************************
    //-------------------------------------------- here check if there character in size of the packet

    public static boolean SizeIsValidated() {
        boolean SizeOfPacketFlage = true;
        int Size = 0;

        try {

            Size = Integer.parseInt(SizeOfPacket.getText());

        } catch (Exception e) {

            SizeOfPacketFlage = false;
        }

        return SizeOfPacketFlage;

    }

    //*****************************************************************************************
    //-------------------------------------------- here check if the size of the packet between 1 - 1024
    public static boolean CheckSizeOfPacket() {

        int Size = 0;

        if (SizeIsValidated() == true) {
            Size = Integer.parseInt(SizeOfPacket.getText());
            if (0 < Size && Size <= 1024) {
                return true;
            } else {
                return false;
            }

        } else {
            return false;
        }

    }

    //*********************************************************************************************
    // ---------------------  here count number of packet that arrived and Lost 
    public static void NumOfPacketsArrivedAndLost() {

        int CounterOfPacketLost = 0;
        int CounterOfPacketArrived = 0;

        for (int i = 0; i < RTTs.length; i++) {

            if (RTTs[i] == -1) {
                CounterOfPacketLost++;
            } else {
                CounterOfPacketArrived++;
            }

        }

        NumOfPacketArrived.setText("" + CounterOfPacketArrived);
        NumOfPacketLost.setText("" + CounterOfPacketLost);

    }

    //*****************************************************************************************
    //------------------------------- here count the avg and the max and min for each test
    public static void CalcAvgMaxMinRtt() {

        float Max = RTTs[0];
        float Min = 0;
        float Avg = 0;
        int CountOfRtts = 0;

        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        // here to declaer the var Min and avoid the min has value -1
        for (int i = 0; i < RTTs.length; i++) {

            if (RTTs[i] != -1) {
                Min = RTTs[i];
                break;
            }
        }

        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        //   here calc Max RTT
        for (int i = 1; i < RTTs.length; i++) {

            if (RTTs[i] != -1) {
                if (Max < RTTs[i]) {
                    Max = RTTs[i];
                } else {

                }
            } else {

            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        // here calc Min RTT
        for (int i = 0; i < RTTs.length; i++) {

            if (RTTs[i] != -1) {
                if (RTTs[i] < Min) {
                    Min = RTTs[i];
                } else {

                }
            } else {

            }
        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        // here calc Avg RTT
        for (int i = 0; i < RTTs.length; i++) {
            if (RTTs[i] == -1) {

            } else {

                Avg = Avg + RTTs[i];
                CountOfRtts++;
            }

        }
        //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        if (Max != -1) {
            MaxRTT.setText("" + Max + "(ms)");
        } else {
            MaxRTT.setText("" + 0.0 + "(ms)");
        }

        MinRTT.setText("" + Min + "(ms)");

        if (CountOfRtts != 0) {
            AvgRTTs.setText("" + (Avg / CountOfRtts) + "(ms)");
        } else {
            AvgRTTs.setText("" + 0.0 + "(ms)");
        }

    }

    //**********************************************************************************************  
    //********************************************************************************************* 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client_UDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client_UDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client_UDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client_UDP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                Client_UDP Client = new Client_UDP();

                Client.setLocationRelativeTo(null);
                Client.setSize(570, 520);
                Client.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel AvgRTTs;
    private javax.swing.JButton Back;
    private static javax.swing.JTextField IPadd;
    private static javax.swing.JLabel MaxRTT;
    private static javax.swing.JLabel MinRTT;
    private static javax.swing.JLabel NumOfPacketArrived;
    private static javax.swing.JLabel NumOfPacketLost;
    private static javax.swing.JComboBox<String> NumOfPackets;
    private javax.swing.JTextField PortNum;
    private static javax.swing.JTextField SizeOfPacket;
    private static javax.swing.JTable Table;
    private javax.swing.JButton Test;
    private static javax.swing.JComboBox<String> TimeOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
